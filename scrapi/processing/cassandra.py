from __future__ import absolute_import

import json
import logging
from uuid import uuid4

from dateutil.parser import parse

from cqlengine import columns, Model

from scrapi import events
from scrapi import database  # noqa
from scrapi.processing.base import BaseProcessor


logger = logging.getLogger(__name__)
logging.getLogger('cqlengine.cql').setLevel(logging.WARN)


class CassandraProcessor(BaseProcessor):
    '''
    Cassandra processor for scrapi. Handles versioning and storing documents in Cassandra
    '''
    NAME = 'cassandra'

    @events.logged(events.PROCESSING, 'normalized.cassandra')
    def process_normalized(self, raw_doc, normalized):
        self.send_to_database(
            source=raw_doc['source'],
            docID=raw_doc['docID'],
            creationDate=parse(normalized.get('creationDate', '')),
            contributor=json.dumps(normalized['contributor']),
            description=normalized.get('description'),
            directLink=normalized['directLink'],
            releaseDate=parse(normalized['releaseDate']),
            freeToRead=json.dumps(normalized.get('freeToRead', {})),
            language=normalized.get('language'),
            licenseRef=json.dumps(normalized.get('licenseRef', [])),
            notificationLink=normalized['notificationLink'],
            publisher=normalized.get('publisher'),
            raw=normalized['raw'],
            resourceIdentifier=normalized['resourceIdentifier'],
            revisionTime=parse(normalized.get('revisionTime', '')),
            sponsorship=json.dumps(normalized.get('sponsorship', [])),
            title=normalized['title'],
            version=normalized.get('version'),
            versionOfRecord=normalized.get('versionOfRecord'),
            otherProperties=json.dumps(normalized.get('otherProperties', {})),
            shareProperties=json.dumps(normalized.get('shareProperties', {}))
        ).save()

    @events.logged(events.PROCESSING, 'raw.cassandra')
    def process_raw(self, raw_doc):
        self.send_to_database(**raw_doc.attributes).save()

    def send_to_database(self, docID, source, **kwargs):
        documents = DocumentModel.objects(docID=docID, source=source)
        if documents:
            document = documents[0]
            if self.different(dict(document), dict(docID=docID, source=source, **kwargs)):
                # Create new version, get UUID of new version, update
                versions = document.versions
                version = VersionModel(key=uuid4(), **dict(document))
                version.save()
                versions.append(version.key)
                return document.update(versions=versions, **kwargs)
            else:
                raise events.Skip("No changees detected for document with ID {0} and source {1}.".format(docID, source))
        else:
            # create document
            return DocumentModel.create(docID=docID, source=source, **kwargs)

    def different(self, old, new):
        return not all([new[key] == old[key] for key in new.keys() if key != 'timestamps'])


@database.register_model
class DocumentModel(Model):
    '''
    Defines the schema for a metadata document in cassandra

    The schema contains denormalized raw document, denormalized
    normalized (so sorry for the terminology clash) document, and
    a list of version IDs that refer to previous versions of this
    metadata.
    '''
    __table_name__ = 'documents'

    # Raw
    docID = columns.Text(primary_key=True)
    source = columns.Text(primary_key=True, index=True, clustering_order="DESC")

    doc = columns.Bytes()
    filetype = columns.Text()
    timestamps = columns.Map(columns.Text, columns.Text)

    # Normalized
    creationDate = columns.DateTime()
    contributor = columns.Text()  # TODO
    description = columns.Text()
    directLink = columns.Text()
    releaseDate = columns.DateTime()
    freeToRead = columns.Text()  # TODO
    language = columns.Text()
    licenseRef = columns.Text()  # TODO
    notificationLink = columns.Text()
    publisher = columns.Text()
    raw = columns.Text()
    resourceIdentifier = columns.Text()
    revisionTime = columns.DateTime()
    sponsorship = columns.Text()  # TODO
    title = columns.Text()
    version = columns.Text()
    versionOfRecord = columns.Text()
    otherProperties = columns.Text()  # TODO
    shareProperties = columns.Text()  # TODO

    # Additional metadata
    versions = columns.List(columns.UUID)


@database.register_model
class VersionModel(Model):
    '''
    Defines the schema for a version of a metadata document in Cassandra

    See the DocumentModel class. This schema is very similar, except it is
    keyed on a UUID that is generated by us, rather than it's own metadata
    '''

    __table_name__ = 'versions'

    key = columns.UUID(primary_key=True, required=True)

    # Raw
    doc = columns.Bytes()
    docID = columns.Text()
    filetype = columns.Text()
    source = columns.Text(index=True)
    timestamps = columns.Map(columns.Text, columns.Text)

    # Normalized
    creationDate = columns.DateTime()
    contributor = columns.Text()  # TODO
    description = columns.Text()
    directLink = columns.Text()
    releaseDate = columns.DateTime()
    freeToRead = columns.Text()  # TODO
    language = columns.Text()
    licenseRef = columns.Text()  # TODO
    notificationLink = columns.Text()
    publisher = columns.Text()
    raw = columns.Text()
    resourceIdentifier = columns.Text()
    revisionTime = columns.DateTime()
    sponsorship = columns.Text()  # TODO
    title = columns.Text()
    version = columns.Text()
    versionOfRecord = columns.Text()
    otherProperties = columns.Text()  # TODO
    shareProperties = columns.Text()  # TODO

    # Additional metadata
    versions = columns.List(columns.UUID)
